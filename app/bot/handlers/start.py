import json
from aiogram import Router, F
from aiogram.enums.content_type import ContentType
from aiogram.filters import CommandStart
from aiogram.types import Message

user_router = Router()


# –•–µ–Ω–¥–ª–µ—Ä –∫–æ–º–∞–Ω–¥—ã /start
@user_router.message(CommandStart())
async def cmd_start(message: Message):
    await message.answer(
        f"üëã –ü—Ä–∏–≤–µ—Ç, <b>{message.from_user.full_name}</b>!")


@user_router.message(F.content_type == ContentType.WEB_APP_DATA)
async def parse_data(message: Message):
    print("=== WebApp Data Handler Triggered ===")
    print(f"Message type: {message.content_type}")
    print(f"Full message object: {message}")

    if message.web_app_data:
        print(f"Web app data present: {message.web_app_data.data}")
        try:
            data = json.loads(message.web_app_data.data)
            print(f"Parsed JSON data: {data}")
            await message.answer(f'–ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ: {data}')
        except json.JSONDecodeError as e:
            print(f"JSON decode error: {e}")
            await message.answer(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–±–æ—Ä–µ –¥–∞–Ω–Ω—ã—Ö: {e}')
    else:
        print("No web app data in message")
        await message.answer('–î–∞–Ω–Ω—ã–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç!')


# –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –æ–±—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ—Ç–ª–æ–≤–∞ –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
@user_router.message()
async def catch_all(message: Message):
    print("=== Catch-all Handler Triggered ===")
    print(f"Message type: {message.content_type}")
    print(f"Full message object: {message}")
